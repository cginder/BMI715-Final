theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
k = 3
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
k = 5
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
k = 4
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 1) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#Expand VIS score to each minute to calculate a geometric average, set a window period
window_number <- 24
minutes_sequence <- seq(0,24*60,by = 1)
vis <- data %>% complete(MRN, timefromshock = minutes_sequence) %>% arrange(MRN,timefromshock) %>%
fill(VIS,.direction="down") %>% replace_na(list(VIS=0)) %>% mutate(window = floor(timefromshock/(1440/window_number))+1)
#filter VIS to 24 hour period
vis <- vis %>% filter(timefromshock >= 0 & timefromshock < 24*60)
#Create Average VIS Per Window
windows <- vis %>% group_by(MRN,window) %>%
summarise(window_VIS = mean(VIS))
#Calculate Mean and SD VIS per patient, then standardize avg_VIS
windows <- windows %>% group_by(MRN) %>%
mutate(MRN_mean = mean(window_VIS),
MRN_sd = sd(window_VIS)) %>% ungroup() %>%
mutate(window_VIS_std = (window_VIS - MRN_mean)/MRN_sd)
#Replace NaN values with 0
windows <- windows %>% mutate(window_VIS_std = replace_na(window_VIS_std,0))
#Create Wide DF
window_vis_df <- windows %>% select(MRN,window,window_VIS) %>% pivot_wider(names_from = window, values_from = window_VIS)
window_vis_std_df <- windows %>% select(MRN,window,window_VIS_std) %>% pivot_wider(names_from = window, values_from = window_VIS_std)
names(window_vis_std_df) <- paste(names(window_vis_std_df),"_v",sep="")
df <- cbind(window_vis_df,window_vis_std_df) %>% select(-"MRN_v")
#K-Means Cluster
set.seed(317)
k = 4
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 2) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
k = 5
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 2) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 1) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#Expand VIS score to each minute to calculate a geometric average, set a window period
window_number <- 12
minutes_sequence <- seq(0,24*60,by = 1)
vis <- data %>% complete(MRN, timefromshock = minutes_sequence) %>% arrange(MRN,timefromshock) %>%
fill(VIS,.direction="down") %>% replace_na(list(VIS=0)) %>% mutate(window = floor(timefromshock/(1440/window_number))+1)
#filter VIS to 24 hour period
vis <- vis %>% filter(timefromshock >= 0 & timefromshock < 24*60)
#Create Average VIS Per Window
windows <- vis %>% group_by(MRN,window) %>%
summarise(window_VIS = mean(VIS))
#Calculate Mean and SD VIS per patient, then standardize avg_VIS
windows <- windows %>% group_by(MRN) %>%
mutate(MRN_mean = mean(window_VIS),
MRN_sd = sd(window_VIS)) %>% ungroup() %>%
mutate(window_VIS_std = (window_VIS - MRN_mean)/MRN_sd)
#Replace NaN values with 0
windows <- windows %>% mutate(window_VIS_std = replace_na(window_VIS_std,0))
#Create Wide DF
window_vis_df <- windows %>% select(MRN,window,window_VIS) %>% pivot_wider(names_from = window, values_from = window_VIS)
window_vis_std_df <- windows %>% select(MRN,window,window_VIS_std) %>% pivot_wider(names_from = window, values_from = window_VIS_std)
names(window_vis_std_df) <- paste(names(window_vis_std_df),"_v",sep="")
df <- cbind(window_vis_df,window_vis_std_df) %>% select(-"MRN_v")
#K-Means Cluster
set.seed(317)
k = 5
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
k = 4
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 1) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#Expand VIS score to each minute to calculate a geometric average, set a window period
window_number <- 6
minutes_sequence <- seq(0,24*60,by = 1)
vis <- data %>% complete(MRN, timefromshock = minutes_sequence) %>% arrange(MRN,timefromshock) %>%
fill(VIS,.direction="down") %>% replace_na(list(VIS=0)) %>% mutate(window = floor(timefromshock/(1440/window_number))+1)
#filter VIS to 24 hour period
vis <- vis %>% filter(timefromshock >= 0 & timefromshock < 24*60)
#Create Average VIS Per Window
windows <- vis %>% group_by(MRN,window) %>%
summarise(window_VIS = mean(VIS))
#Calculate Mean and SD VIS per patient, then standardize avg_VIS
windows <- windows %>% group_by(MRN) %>%
mutate(MRN_mean = mean(window_VIS),
MRN_sd = sd(window_VIS)) %>% ungroup() %>%
mutate(window_VIS_std = (window_VIS - MRN_mean)/MRN_sd)
#Replace NaN values with 0
windows <- windows %>% mutate(window_VIS_std = replace_na(window_VIS_std,0))
#Create Wide DF
window_vis_df <- windows %>% select(MRN,window,window_VIS) %>% pivot_wider(names_from = window, values_from = window_VIS)
window_vis_std_df <- windows %>% select(MRN,window,window_VIS_std) %>% pivot_wider(names_from = window, values_from = window_VIS_std)
names(window_vis_std_df) <- paste(names(window_vis_std_df),"_v",sep="")
df <- cbind(window_vis_df,window_vis_std_df) %>% select(-"MRN_v")
#K-Means Cluster
set.seed(317)
k = 4
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 2) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#Expand VIS score to each minute to calculate a geometric average, set a window period
window_number <- 8
minutes_sequence <- seq(0,24*60,by = 1)
vis <- data %>% complete(MRN, timefromshock = minutes_sequence) %>% arrange(MRN,timefromshock) %>%
fill(VIS,.direction="down") %>% replace_na(list(VIS=0)) %>% mutate(window = floor(timefromshock/(1440/window_number))+1)
#filter VIS to 24 hour period
vis <- vis %>% filter(timefromshock >= 0 & timefromshock < 24*60)
#Create Average VIS Per Window
windows <- vis %>% group_by(MRN,window) %>%
summarise(window_VIS = mean(VIS))
#Calculate Mean and SD VIS per patient, then standardize avg_VIS
windows <- windows %>% group_by(MRN) %>%
mutate(MRN_mean = mean(window_VIS),
MRN_sd = sd(window_VIS)) %>% ungroup() %>%
mutate(window_VIS_std = (window_VIS - MRN_mean)/MRN_sd)
#Replace NaN values with 0
windows <- windows %>% mutate(window_VIS_std = replace_na(window_VIS_std,0))
#Create Wide DF
window_vis_df <- windows %>% select(MRN,window,window_VIS) %>% pivot_wider(names_from = window, values_from = window_VIS)
window_vis_std_df <- windows %>% select(MRN,window,window_VIS_std) %>% pivot_wider(names_from = window, values_from = window_VIS_std)
names(window_vis_std_df) <- paste(names(window_vis_std_df),"_v",sep="")
df <- cbind(window_vis_df,window_vis_std_df) %>% select(-"MRN_v")
#K-Means Cluster
set.seed(317)
k = 4
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 2) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
k = 5
scale_df <- scale(df)
kclusters <- kmeans(scale_df,k)
df$clusters <- factor(kclusters$cluster)
cluster_df <- df %>% select(-contains("_v")) %>% pivot_longer(!c(MRN,clusters),names_to = "window",values_to = "VIS") %>%
group_by(clusters,window) %>% summarise(
mean_VIS = mean(VIS))
cluster_df %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5))
cluster_df %>% filter(clusters != 2) %>% ggplot(aes(x=as.numeric(window),y=mean_VIS,group=clusters,color=clusters)) +
geom_point() +
geom_line() +
theme_classic() +
labs(title = "Mean VIS by Cluster during 4-Hour Windows",
subtitle = "Excluding High VIS Cluster",
x = "Window (4 Hours)",
y = "Mean VIS") +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
#Libraries
library(tidyverse)
library(ggplot2)
setwd("~/Documents/GitHub/BMI715Final")
#SetWD
setwd("~/Documents/GitHub/BMI715Final")
#Libraries
library(tidyverse)
source("~/Documents/GitHub/BMI715Final/Untitled.R", echo=TRUE)
#Libraries
library(tidyverse)
#Libraries
library(tidyverse)
#Libraries
library(tidyverse)
library(glmnet)
library(randomForest)
library(caret)
install.packages("randomForest")
install.packages("caret")
library(randomForest)
library(caret)
#Read Filtered Data
filtered_df <- read.csv("Filtered Data.csv")
filtered_df <- filtered_df[,-1] #remove rowID read in
#Selection of Indepenent Variables
variables <- c(  "X", #Respondent ID
"LBXAPB", #Apo B, dependent variable
"avgSBP", #Calculated Average SBP during processing script
"MCQ370A", #Controlling or losing weight?
"MCQ370B", #Increasing exercise?
"BMXBMI", #BMI
"SMQ020", #Tobacco Use
"LBXTC", #Total Cholesterol
"LBXGH", #A1c
"LBXSTR", #Triglycerides
"HUQ051", #Number of times received healthcare over last year
"HUQ010") #Health Quality 1-5
df <- filtered_df %>% select(any_of(variables))
#Exploratory Analysis/QC
df %>% select(-c(X,LBXAPB)) %>% plot()
df %>% select(-c(X,LBXAPB)) %>% cor()
#MCQ370A and MCQ370B highly correlated at 0.47, remove MCQ370B
#MCQ370A and BMI negatively correlated at -.23, keep
#Triglycerides and TC correlated at 0.35, keep due to pathophysiologic plausability
#HUQ010 and HUQ051 correlated at 0.22, keep
df <- df %>% select(-MCQ370B)
#Remove Outliers in LBXTC and LBXSTR
head(sort(df$LBXTC,decreasing=T))
head(sort(df$LBXSTR,decreasing=T))
df <- df %>% filter(LBXTC != 612 | LBXSTR != 6057)
#Scale Continuous Variables
scaled_df <- df %>% select(-c(X,LBXAPB,MCQ370A,SMQ020,HUQ051,HUQ010)) %>% scale()
#Set Dummy Variables to 0/1 instead of 1/2
dummy_df <- df  %>% select(c(MCQ370A,SMQ020))
dummy_df$MCQ370A <- dummy_df$MCQ370A - 1
dummy_df$SMQ020 <- dummy_df$SMQ020 - 1
#Create Multiple Indicator Variables
df$HUQ010 <- factor(df$HUQ010)
df$HUQ051 <- factor(df$HUQ051)
indicator_df <- df %>% select(c(HUQ051, HUQ010)) %>%
data.frame(., model.matrix( ~ HUQ010 + HUQ051, .)[, -1]) %>%
select(!c(HUQ051, HUQ010))
#Combine back into dataframe
model_df <- cbind(df$LBXAPB,scaled_df,dummy_df,indicator_df)
colnames(model_df)[1] <- "LBXAPB"
# Build the main linear regression model and check residuals
model_main <- lm(LBXAPB ~ ., data = model_df)
summary(model_main)
par(mfrow = c(2, 2))
plot(model_main)
# Stepwise model selection
full_model <- lm(LBXAPB ~ ., data = model_df)
library(MASS)
stepwise_model <- stepAIC(full_model, direction = "both")
summary(stepwise_model)
x <- model.matrix(~ avgSBP + MCQ370A + BMXBMI + SMQ020 + LBXTC + LBXGH + LBXSTR + HUQ051 + HUQ010, data = model_df)[,-1]
y <- model_df$LBXAPB
cv_model_full <- cv.glmnet(model_df, model_df$LBXAPB, alpha = 0.5)
View(model_df)
x <- model.matrix(~., data = model_df)[,-1]
y <- model_df$LBXAPB
cv_model_full <- cv.glmnet(x, y, alpha = 0.5)
plot(cv_model_full)
coef(cv_model_full, s = "lambda.1se")
View(x)
View(model_df)
View(x)
x <- model.matrix(~., data = model_df)[,-1]
x <- model_df[,-1]
y <- model_df$LBXAPB
cv_model_full <- cv.glmnet(x, y, alpha = 0.5)
x <- model.matrix(~.-LBXAPB, data = model_df)[,-1]
y <- model_df$LBXAPB
cv_model_full <- cv.glmnet(x, y, alpha = 0.5)
plot(cv_model_full)
coef(cv_model_full, s = "lambda.1se")
#Random Forest Analysis
set.seed(715)
#dichotomize ApoB to < 100 vs >= 100
rf_df <- df
rf_df$APOB_cat <- ""
rf_df$APOB_cat[rf_df$LBXAPB >= 100] <- 1
rf_df$APOB_cat[rf_df$LBXAPB < 100] <- 0
rf_df$APOB_cat <- factor(rf_df$APOB_cat)
rf_df <- rf_df %>% select(-c(X,LBXAPB))
rf_df <- rf_df %>% dplyr::select(-c(X,LBXAPB))
#Split into 4:1 test/train data
train_index <- createDataPartition(rf_df$APOB_cat, p=0.8, list=F)
train_df <- rf_df[train_index,]
test_df <- rf_df[-train_index,]
#Train RF Model
rf_model <- randomForest(APOB_cat~.,data=train_df,ntree=500,importance=T)
#Predictions on Test Dataset
predictions <- predict(rf_model,newdata = test_df)
#Confusion Matrix
conf_matrix <- confusionMatrix(predictions,test_df$APOB_cat)
conf_matrix
importance_values <- importance(rf_model)
importance_values
write_csv(data,model_df)
write.csv(model_df, file = data, row.names = FALSE)
write.csv(model_df, file = "data", row.names = FALSE)
write.csv(model_df, file = "data.csv", row.names = FALSE)
View(model_df)
#
tobacco_groups <- split(model_df$LBXTC, model_df$SMQ020)
View(tobacco_groups)
#
tobacco_groups <- split(df$LBXTC, df$SMQ020)
View(tobacco_groups)
# Normality Test
shapiro.test(tobacco_groups[[1]])
shapiro.test(tobacco_groups[[2]])
# Histogram for the distribution of LBXTC
hist(df$LBXTC, main = "Distribution of Total Cholesterol (LBXTC)", xlab = "Total Cholesterol", col = "blue", border = "black")
# Bar plot for the number of levels in SMQ020
smq020_counts <- table(data$SMQ020)
barplot(smq020_counts, main = "Count of Tobacco Use Levels (SMQ020)", xlab = "Tobacco Use", ylab = "Count", col = "green")
# Bar plot for the number of levels in SMQ020
smq020_counts <- table(df$SMQ020)
barplot(smq020_counts, main = "Count of Tobacco Use Levels (SMQ020)", xlab = "Tobacco Use", ylab = "Count", col = "green")
# Normality Test
shapiro.test(df$LBXTC)
shapiro.test(tobacco_groups[[1]])
shapiro.test(tobacco_groups[[2]])
# Equality of Variances Test
variance_testing <- var.test(tobacco_groups[[1]], tobacco_groups[[2]])
variance_testing
hist(tobacco_groups[[1]])
hist(tobacco_groups[[1]])
hist(tobacco_groups[[2]])
# Histogram for the distribution of LBXTC
hist(df$LBXTC, main = "Distribution of Total Cholesterol (LBXTC)", xlab = "Total Cholesterol", col = "blue", border = "black")
# Histogram for the distribution of LBXTC
hist(df$LBXTC, main = "Distribution of Total Cholesterol (LBXTC)", xlab = "Total Cholesterol")
hist(tobacco_groups[[1]])
hist(tobacco_groups[[2]])
View(tobacco_groups)
# Normality Test
shapiro.test(df$LBXTC)
shapiro.test(tobacco_groups[[1]])
shapiro.test(tobacco_groups[[2]])
hist(tobacco_groups[[2]])
# Histogram for the distribution of LBXTC
hist(df$LBXTC, main = "Distribution of Total Cholesterol (LBXTC)", xlab = "Total Cholesterol")
hist(tobacco_groups[[1]])
hist(tobacco_groups[[2]])
#Perform the Mann-Whitney U test (Wilcoxon Rank-Sum test)
wilcoxon.test(tobacco_groups[[1]], tobacco_groups[[2]])
#Perform the Mann-Whitney U test (Wilcoxon Rank-Sum test)
wilcox.test(tobacco_groups[[1]], tobacco_groups[[2]])
stepwise_model <- stepAIC(full_model, direction = "both")
final_model<- lm(LBXAPB ~ BMXBMI + LBXTC + LBXGH + LBXSTR + SMQ020 + HUQ0103 +
HUQ0104 + HUQ0105 + HUQ0512 + HUQ0513 + HUQ0516 + HUQ0518, data = model_df)
summary(final_model)
